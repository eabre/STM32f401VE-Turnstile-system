
Baran_Yusuf_Tanriverdi_Odev_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f08  08002f08  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f10  08002f10  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000090  08002fa8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002fa8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009907  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001777  00000000  00000000  000299c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002b140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001623f  00000000  00000000  0002c418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074a5  00000000  00000000  00042657  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a3f2  00000000  00000000  00049afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3eee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba0  00000000  00000000  000d3f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002e44 	.word	0x08002e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08002e44 	.word	0x08002e44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Delay>:
#include "stm32f4xx_hal.h"
#include "main.h"
#include "LCD.h"

void Delay(uint32_t nCount)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    for(; nCount != 0; nCount--);
 8000588:	e002      	b.n	8000590 <Delay+0x10>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3b01      	subs	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f9      	bne.n	800058a <Delay+0xa>
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <lcd_delay>:
void lcd_delay(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
    Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f7ff ffe9 	bl	8000580 <Delay>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <LCD_Port_Clear>:

void LCD_Port_Clear(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
    LCD_EN_GPIO_Port->BSRR  = LCD_EN_Pin << 16;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <LCD_Port_Clear+0x38>)
 80005ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005be:	619a      	str	r2, [r3, #24]
    LCD_D4_GPIO_Port->BSRR  = LCD_D4_Pin << 16;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <LCD_Port_Clear+0x38>)
 80005c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005c6:	619a      	str	r2, [r3, #24]
    LCD_D5_GPIO_Port->BSRR  = LCD_D5_Pin << 16;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <LCD_Port_Clear+0x38>)
 80005ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005ce:	619a      	str	r2, [r3, #24]
    LCD_D6_GPIO_Port->BSRR  = LCD_D6_Pin << 16;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LCD_Port_Clear+0x38>)
 80005d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005d6:	619a      	str	r2, [r3, #24]
    LCD_D7_GPIO_Port->BSRR  = LCD_D7_Pin << 16;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <LCD_Port_Clear+0x38>)
 80005da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005de:	619a      	str	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40020c00 	.word	0x40020c00

080005f0 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	/*
	 * Hocam gorsel olarak da dosyanin icine koydum benim PC'de LCD_RS_GPIO_Port ya da LCD_RS_Pin degiskeninde hata veriyor bu nedenle
	 * RS olan yerlere RES demem gerekiyor. Calismazsa bundan kaynakli olabilir.
	 */
    LCD_RES_GPIO_Port->BSRR  = LCD_RES_Pin << 16;
 80005fa:	4b48      	ldr	r3, [pc, #288]	; (800071c <lcd_cmd+0x12c>)
 80005fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000600:	619a      	str	r2, [r3, #24]
    LCD_Port_Clear();
 8000602:	f7ff ffd7 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 8000606:	f7ff ffcc 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800060a:	4b44      	ldr	r3, [pc, #272]	; (800071c <lcd_cmd+0x12c>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a43      	ldr	r2, [pc, #268]	; (800071c <lcd_cmd+0x12c>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6153      	str	r3, [r2, #20]

    if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <lcd_cmd+0x3a>
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <lcd_cmd+0x12c>)
 8000622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	e003      	b.n	8000632 <lcd_cmd+0x42>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <lcd_cmd+0x12c>)
 800062c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000630:	619a      	str	r2, [r3, #24]
    if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 0320 	and.w	r3, r3, #32
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <lcd_cmd+0x56>
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <lcd_cmd+0x12c>)
 800063e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000642:	619a      	str	r2, [r3, #24]
 8000644:	e003      	b.n	800064e <lcd_cmd+0x5e>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <lcd_cmd+0x12c>)
 8000648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800064c:	619a      	str	r2, [r3, #24]
    if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	2b00      	cmp	r3, #0
 8000656:	d004      	beq.n	8000662 <lcd_cmd+0x72>
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <lcd_cmd+0x12c>)
 800065a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065e:	619a      	str	r2, [r3, #24]
 8000660:	e003      	b.n	800066a <lcd_cmd+0x7a>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <lcd_cmd+0x12c>)
 8000664:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000668:	619a      	str	r2, [r3, #24]
    if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	da04      	bge.n	800067c <lcd_cmd+0x8c>
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <lcd_cmd+0x12c>)
 8000674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000678:	619a      	str	r2, [r3, #24]
 800067a:	e003      	b.n	8000684 <lcd_cmd+0x94>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <lcd_cmd+0x12c>)
 800067e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000682:	619a      	str	r2, [r3, #24]

    lcd_delay();
 8000684:	f7ff ff8d 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 8000688:	f7ff ff94 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 800068c:	f7ff ff89 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <lcd_cmd+0x12c>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <lcd_cmd+0x12c>)
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	6153      	str	r3, [r2, #20]

    if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <lcd_cmd+0xc0>
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <lcd_cmd+0x12c>)
 80006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	e003      	b.n	80006b8 <lcd_cmd+0xc8>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <lcd_cmd+0x12c>)
 80006b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b6:	619a      	str	r2, [r3, #24]
    if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <lcd_cmd+0xdc>
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <lcd_cmd+0x12c>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	e003      	b.n	80006d4 <lcd_cmd+0xe4>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <lcd_cmd+0x12c>)
 80006ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006d2:	619a      	str	r2, [r3, #24]
    if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d004      	beq.n	80006e8 <lcd_cmd+0xf8>
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <lcd_cmd+0x12c>)
 80006e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e4:	619a      	str	r2, [r3, #24]
 80006e6:	e003      	b.n	80006f0 <lcd_cmd+0x100>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <lcd_cmd+0x12c>)
 80006ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006ee:	619a      	str	r2, [r3, #24]
    if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <lcd_cmd+0x114>
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <lcd_cmd+0x12c>)
 80006fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	e003      	b.n	800070c <lcd_cmd+0x11c>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <lcd_cmd+0x12c>)
 8000706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800070a:	619a      	str	r2, [r3, #24]

    lcd_delay();
 800070c:	f7ff ff49 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 8000710:	f7ff ff50 	bl	80005b4 <LCD_Port_Clear>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020c00 	.word	0x40020c00

08000720 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    LCD_RES_GPIO_Port->ODR |= LCD_RES_Pin;
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <lcd_char_cp+0x130>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a48      	ldr	r2, [pc, #288]	; (8000850 <lcd_char_cp+0x130>)
 8000730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000734:	6153      	str	r3, [r2, #20]

    LCD_Port_Clear();
 8000736:	f7ff ff3d 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 800073a:	f7ff ff32 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800073e:	4b44      	ldr	r3, [pc, #272]	; (8000850 <lcd_char_cp+0x130>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a43      	ldr	r2, [pc, #268]	; (8000850 <lcd_char_cp+0x130>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6153      	str	r3, [r2, #20]

    if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <lcd_char_cp+0x3e>
 8000754:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <lcd_char_cp+0x130>)
 8000756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	e003      	b.n	8000766 <lcd_char_cp+0x46>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <lcd_char_cp+0x130>)
 8000760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000764:	619a      	str	r2, [r3, #24]
    if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <lcd_char_cp+0x5a>
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <lcd_char_cp+0x130>)
 8000772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000776:	619a      	str	r2, [r3, #24]
 8000778:	e003      	b.n	8000782 <lcd_char_cp+0x62>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <lcd_char_cp+0x130>)
 800077c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000780:	619a      	str	r2, [r3, #24]
    if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000788:	2b00      	cmp	r3, #0
 800078a:	d004      	beq.n	8000796 <lcd_char_cp+0x76>
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <lcd_char_cp+0x130>)
 800078e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000792:	619a      	str	r2, [r3, #24]
 8000794:	e003      	b.n	800079e <lcd_char_cp+0x7e>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <lcd_char_cp+0x130>)
 8000798:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800079c:	619a      	str	r2, [r3, #24]
    if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	da04      	bge.n	80007b0 <lcd_char_cp+0x90>
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <lcd_char_cp+0x130>)
 80007a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ac:	619a      	str	r2, [r3, #24]
 80007ae:	e003      	b.n	80007b8 <lcd_char_cp+0x98>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <lcd_char_cp+0x130>)
 80007b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b6:	619a      	str	r2, [r3, #24]

    lcd_delay();
 80007b8:	f7ff fef3 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 80007bc:	f7ff fefa 	bl	80005b4 <LCD_Port_Clear>

    lcd_delay();
 80007c0:	f7ff feef 	bl	80005a2 <lcd_delay>

    LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <lcd_char_cp+0x130>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <lcd_char_cp+0x130>)
 80007ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ce:	6153      	str	r3, [r2, #20]

    if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <lcd_char_cp+0xc4>
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <lcd_char_cp+0x130>)
 80007dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	e003      	b.n	80007ec <lcd_char_cp+0xcc>
    else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <lcd_char_cp+0x130>)
 80007e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007ea:	619a      	str	r2, [r3, #24]
    if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <lcd_char_cp+0xe0>
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <lcd_char_cp+0x130>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
 80007fe:	e003      	b.n	8000808 <lcd_char_cp+0xe8>
    else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <lcd_char_cp+0x130>)
 8000802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000806:	619a      	str	r2, [r3, #24]
    if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	2b00      	cmp	r3, #0
 8000810:	d004      	beq.n	800081c <lcd_char_cp+0xfc>
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <lcd_char_cp+0x130>)
 8000814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000818:	619a      	str	r2, [r3, #24]
 800081a:	e003      	b.n	8000824 <lcd_char_cp+0x104>
    else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <lcd_char_cp+0x130>)
 800081e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000822:	619a      	str	r2, [r3, #24]
    if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <lcd_char_cp+0x118>
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <lcd_char_cp+0x130>)
 8000830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000834:	619a      	str	r2, [r3, #24]
 8000836:	e003      	b.n	8000840 <lcd_char_cp+0x120>
    else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <lcd_char_cp+0x130>)
 800083a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800083e:	619a      	str	r2, [r3, #24]

    lcd_delay();
 8000840:	f7ff feaf 	bl	80005a2 <lcd_delay>

    LCD_Port_Clear();
 8000844:	f7ff feb6 	bl	80005b4 <LCD_Port_Clear>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020c00 	.word	0x40020c00

08000854 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    while(*out_char)
 800085c:	e008      	b.n	8000870 <lcd_out_cp+0x1c>
    {
        lcd_delay();
 800085e:	f7ff fea0 	bl	80005a2 <lcd_delay>
        lcd_char_cp(*out_char++);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff58 	bl	8000720 <lcd_char_cp>
    while(*out_char)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f2      	bne.n	800085e <lcd_out_cp+0xa>
    }
    lcd_delay();
 8000878:	f7ff fe93 	bl	80005a2 <lcd_delay>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	460b      	mov	r3, r1
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	4613      	mov	r3, r2
 8000894:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000896:	20fa      	movs	r0, #250	; 0xfa
 8000898:	f000 fcb0 	bl	80011fc <HAL_Delay>
    lcd_cmd(_RETURN_HOME);
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fea7 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008a2:	2032      	movs	r0, #50	; 0x32
 80008a4:	f000 fcaa 	bl	80011fc <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	797b      	ldrb	r3, [r7, #5]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe97 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f000 fc9a 	bl	80011fc <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80008c8:	2006      	movs	r0, #6
 80008ca:	f7ff fe91 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f000 fc94 	bl	80011fc <HAL_Delay>
    lcd_cmd(0x0E);
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff fe8b 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008da:	2032      	movs	r0, #50	; 0x32
 80008dc:	f000 fc8e 	bl	80011fc <HAL_Delay>
    lcd_cmd(0x0C);
 80008e0:	200c      	movs	r0, #12
 80008e2:	f7ff fe85 	bl	80005f0 <lcd_cmd>
    HAL_Delay(50);
 80008e6:	2032      	movs	r0, #50	; 0x32
 80008e8:	f000 fc88 	bl	80011fc <HAL_Delay>
    lcd_cmd(0x01);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fe7f 	bl	80005f0 <lcd_cmd>
    HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f000 fc82 	bl	80011fc <HAL_Delay>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
    if(row == 1)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <lcd_gotoxy+0x24>
    {
        lcd_cmd(0x80 + (column - 1));
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	337f      	adds	r3, #127	; 0x7f
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe67 	bl	80005f0 <lcd_cmd>
    }
    else if(row == 2)
    {
        lcd_cmd(0xC0 + (column - 1));
    }
}
 8000922:	e008      	b.n	8000936 <lcd_gotoxy+0x36>
    else if(row == 2)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d105      	bne.n	8000936 <lcd_gotoxy+0x36>
        lcd_cmd(0xC0 + (column - 1));
 800092a:	79bb      	ldrb	r3, [r7, #6]
 800092c:	3b41      	subs	r3, #65	; 0x41
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe5d 	bl	80005f0 <lcd_cmd>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <lcd_print>:
    lcd_gotoxy(row, column);
    lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	603a      	str	r2, [r7, #0]
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	460b      	mov	r3, r1
 800094c:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800094e:	79ba      	ldrb	r2, [r7, #6]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffd3 	bl	8000900 <lcd_gotoxy>
    lcd_out_cp(out_char);
 800095a:	6838      	ldr	r0, [r7, #0]
 800095c:	f7ff ff7a 	bl	8000854 <lcd_out_cp>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <lcd_clear>:
void lcd_clear(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

    lcd_cmd(_CLEAR);
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fe3f 	bl	80005f0 <lcd_cmd>
    HAL_Delay(2);
 8000972:	2002      	movs	r0, #2
 8000974:	f000 fc42 	bl	80011fc <HAL_Delay>

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <LED_Toggle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED_Toggle(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	 * icindeki fonksiyondur.
	 * 2 amac icin calisir;
	 * ilk amaci; kesmeden basilan buton ogrenildiginde ona uygun bir sekilde led'leri toggle eder
	 * ikinci olarak da delay icin gerekli olan degiskeni 100ms'de bir arttirir
	 */
	if(selection == 1)
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <LED_Toggle+0x80>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10d      	bne.n	80009a4 <LED_Toggle+0x28>
	{
		HAL_GPIO_WritePin(Pause_LED_GPIO_Port, Pause_LED_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2110      	movs	r1, #16
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <LED_Toggle+0x84>)
 800098e:	f000 ff03 	bl	8001798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_LED_GPIO_Port, Stop_LED_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2120      	movs	r1, #32
 8000996:	481a      	ldr	r0, [pc, #104]	; (8000a00 <LED_Toggle+0x84>)
 8000998:	f000 fefe 	bl	8001798 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(Start_LED_GPIO_Port, Start_LED_Pin);
 800099c:	2108      	movs	r1, #8
 800099e:	4818      	ldr	r0, [pc, #96]	; (8000a00 <LED_Toggle+0x84>)
 80009a0:	f000 ff13 	bl	80017ca <HAL_GPIO_TogglePin>
	}
	if(selection == 2)
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <LED_Toggle+0x80>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d10d      	bne.n	80009c8 <LED_Toggle+0x4c>
	{
		HAL_GPIO_WritePin(Start_LED_GPIO_Port, Start_LED_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <LED_Toggle+0x84>)
 80009b2:	f000 fef1 	bl	8001798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_LED_GPIO_Port, Stop_LED_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <LED_Toggle+0x84>)
 80009bc:	f000 feec 	bl	8001798 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(Pause_LED_GPIO_Port, Pause_LED_Pin);
 80009c0:	2110      	movs	r1, #16
 80009c2:	480f      	ldr	r0, [pc, #60]	; (8000a00 <LED_Toggle+0x84>)
 80009c4:	f000 ff01 	bl	80017ca <HAL_GPIO_TogglePin>
	}
	if(selection == 3)
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LED_Toggle+0x80>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d10d      	bne.n	80009ec <LED_Toggle+0x70>
	{
		HAL_GPIO_WritePin(Pause_LED_GPIO_Port, Pause_LED_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2110      	movs	r1, #16
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <LED_Toggle+0x84>)
 80009d6:	f000 fedf 	bl	8001798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Start_LED_GPIO_Port, Start_LED_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <LED_Toggle+0x84>)
 80009e0:	f000 feda 	bl	8001798 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(Stop_LED_GPIO_Port, Stop_LED_Pin);
 80009e4:	2120      	movs	r1, #32
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <LED_Toggle+0x84>)
 80009e8:	f000 feef 	bl	80017ca <HAL_GPIO_TogglePin>
	}
	ms_bolum++;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <LED_Toggle+0x88>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <LED_Toggle+0x88>)
 80009f4:	6013      	str	r3, [r2, #0]
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000ac 	.word	0x200000ac
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	200000c4 	.word	0x200000c4

08000a08 <delay_ms>:
void delay_ms(int x)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	/*100'le carpmamin nedeni; her 100ms de a bir arttigi icin
	 * ms_bolum = 1/(100 milisecond) diyebiliriz dolayisiyla 100*ms_bolum = 1 milisaniye olur
	 */
	while(100*ms_bolum < x)
 8000a10:	bf00      	nop
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <delay_ms+0x2c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dcf7      	bgt.n	8000a12 <delay_ms+0xa>
	{
	}
	ms_bolum= 0;
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <delay_ms+0x2c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	200000c4 	.word	0x200000c4

08000a38 <Random_Toggle>:
void Random_Toggle(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	int x=100+(rand()%401); //100-500 ms arasi gecikme icin uretilen degisken
 8000a3e:	f001 fdbf 	bl	80025c0 <rand>
 8000a42:	4602      	mov	r2, r0
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <Random_Toggle+0x70>)
 8000a46:	fb83 1302 	smull	r1, r3, r3, r2
 8000a4a:	1199      	asrs	r1, r3, #6
 8000a4c:	17d3      	asrs	r3, r2, #31
 8000a4e:	1acb      	subs	r3, r1, r3
 8000a50:	f240 1191 	movw	r1, #401	; 0x191
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	3364      	adds	r3, #100	; 0x64
 8000a5c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(Rand_Sig_GPIO_Port, Rand_Sig_Pin,GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2102      	movs	r1, #2
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <Random_Toggle+0x74>)
 8000a64:	f000 fe98 	bl	8001798 <HAL_GPIO_WritePin>
	delay_ms(x);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ffcd 	bl	8000a08 <delay_ms>
	HAL_GPIO_WritePin(Rand_Sig_GPIO_Port, Rand_Sig_Pin,GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2102      	movs	r1, #2
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <Random_Toggle+0x74>)
 8000a74:	f000 fe90 	bl	8001798 <HAL_GPIO_WritePin>
	x=100+(rand()%401);
 8000a78:	f001 fda2 	bl	80025c0 <rand>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <Random_Toggle+0x70>)
 8000a80:	fb83 1302 	smull	r1, r3, r3, r2
 8000a84:	1199      	asrs	r1, r3, #6
 8000a86:	17d3      	asrs	r3, r2, #31
 8000a88:	1acb      	subs	r3, r1, r3
 8000a8a:	f240 1191 	movw	r1, #401	; 0x191
 8000a8e:	fb01 f303 	mul.w	r3, r1, r3
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	3364      	adds	r3, #100	; 0x64
 8000a96:	607b      	str	r3, [r7, #4]
	delay_ms(x);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffb5 	bl	8000a08 <delay_ms>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	28db9c69 	.word	0x28db9c69
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Burada butonlardan hangisi basildiysa sistem ona göre bir selection degeri atar
	 * ve lcd temizlemelerini saglar
	 */
	if(GPIO_Pin==Start_Button_Pin)
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ac0:	d10b      	bne.n	8000ada <HAL_GPIO_EXTI_Callback+0x2a>
	{
		selection=1;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
		temp=0;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8000ace:	f7ff ff4b 	bl	8000968 <lcd_clear>
		delay_ms(20);
 8000ad2:	2014      	movs	r0, #20
 8000ad4:	f7ff ff98 	bl	8000a08 <delay_ms>
		counter_human=0;
		decade=0;
		lcd_clear();
		delay_ms(20);
	}
}
 8000ad8:	e01e      	b.n	8000b18 <HAL_GPIO_EXTI_Callback+0x68>
	else if(GPIO_Pin==Pause_Button_Pin)
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae0:	d108      	bne.n	8000af4 <HAL_GPIO_EXTI_Callback+0x44>
		selection=2;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8000ae8:	f7ff ff3e 	bl	8000968 <lcd_clear>
		delay_ms(20);
 8000aec:	2014      	movs	r0, #20
 8000aee:	f7ff ff8b 	bl	8000a08 <delay_ms>
}
 8000af2:	e011      	b.n	8000b18 <HAL_GPIO_EXTI_Callback+0x68>
	else if(GPIO_Pin==Stop_Button_Pin)
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000afa:	d10d      	bne.n	8000b18 <HAL_GPIO_EXTI_Callback+0x68>
		selection=3;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x70>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	601a      	str	r2, [r3, #0]
		counter_human=0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x78>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
		decade=0;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
		lcd_clear();
 8000b0e:	f7ff ff2b 	bl	8000968 <lcd_clear>
		delay_ms(20);
 8000b12:	2014      	movs	r0, #20
 8000b14:	f7ff ff78 	bl	8000a08 <delay_ms>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000ac 	.word	0x200000ac
 8000b24:	200000c0 	.word	0x200000c0
 8000b28:	200000b4 	.word	0x200000b4
 8000b2c:	200000b0 	.word	0x200000b0

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 faf0 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f8ca 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f976 	bl	8000e2c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000b40:	f000 f926 	bl	8000d90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE); //LCD baslangic ayarlari
 8000b44:	2208      	movs	r2, #8
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fe9b 	bl	8000884 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim4); //TIM2 interrupt sayaci baslatma
 8000b4e:	4850      	ldr	r0, [pc, #320]	; (8000c90 <main+0x160>)
 8000b50:	f001 faa1 	bl	8002096 <HAL_TIM_Base_Start_IT>
  delay_ms(200);
 8000b54:	20c8      	movs	r0, #200	; 0xc8
 8000b56:	f7ff ff57 	bl	8000a08 <delay_ms>
  lcd_clear();
 8000b5a:	f7ff ff05 	bl	8000968 <lcd_clear>
  lcd_print(1, 1, "Baran Tanriverdi");
 8000b5e:	4a4d      	ldr	r2, [pc, #308]	; (8000c94 <main+0x164>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff feeb 	bl	800093e <lcd_print>
  lcd_print(2, 1, "Turnike Uygulama");
 8000b68:	4a4b      	ldr	r2, [pc, #300]	; (8000c98 <main+0x168>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fee6 	bl	800093e <lcd_print>
  delay_ms(500);
 8000b72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b76:	f7ff ff47 	bl	8000a08 <delay_ms>
  lcd_clear();
 8000b7a:	f7ff fef5 	bl	8000968 <lcd_clear>
  lcd_print(1, 1, "Baslata Basiniz");
 8000b7e:	4a47      	ldr	r2, [pc, #284]	; (8000c9c <main+0x16c>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff fedb 	bl	800093e <lcd_print>
  delay_ms(100);
 8000b88:	2064      	movs	r0, #100	; 0x64
 8000b8a:	f7ff ff3d 	bl	8000a08 <delay_ms>
	   * Burada EXTI kesmesinden elde edilen selection degerleri istenilen durumlar icin kullanilir
	   * selection = 1 ise, sistem sensor'u okuyarak sensorun SET ve RESET degerlerine gore sayiciyi arttirir ve 10'luk sayici ve normal sayiciyi yazdirir.
	   * selection = 2 ise, sistem bir okuma yapmaz sadece halihazirda olan degerleri yazdirir.
	   * selection = 3 ise, sistem toplam sayiyi yazdirir
	   */
	  if(selection ==1)
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <main+0x170>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d147      	bne.n	8000c26 <main+0xf6>
	  	{
	  		Random_Toggle();
 8000b96:	f7ff ff4f 	bl	8000a38 <Random_Toggle>
	  		if(HAL_GPIO_ReadPin(Sensor_Reader_GPIO_Port, Sensor_Reader_Pin)!= GPIO_PIN_SET)
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <main+0x174>)
 8000b9e:	f000 fde3 	bl	8001768 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d010      	beq.n	8000bca <main+0x9a>
	  		{
	  			counter_human++;
 8000ba8:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <main+0x178>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <main+0x178>)
 8000bb0:	6013      	str	r3, [r2, #0]
	  			if(counter_human >= 5){
 8000bb2:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <main+0x178>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	dd07      	ble.n	8000bca <main+0x9a>
	  				decade++;
 8000bba:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <main+0x17c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a3a      	ldr	r2, [pc, #232]	; (8000cac <main+0x17c>)
 8000bc2:	6013      	str	r3, [r2, #0]
	  				counter_human=0;
 8000bc4:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <main+0x178>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
	  			}
	  		}
	  		sprintf(mesaj, "Yolcu Sayisi: %d", decade);
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <main+0x17c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4937      	ldr	r1, [pc, #220]	; (8000cb0 <main+0x180>)
 8000bd2:	4838      	ldr	r0, [pc, #224]	; (8000cb4 <main+0x184>)
 8000bd4:	f001 fd28 	bl	8002628 <siprintf>
	  		lcd_print(1, 1, mesaj);
 8000bd8:	4a36      	ldr	r2, [pc, #216]	; (8000cb4 <main+0x184>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff feae 	bl	800093e <lcd_print>
	  		sprintf(mesaj_2, "Counter:%d", counter_human);
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <main+0x178>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4933      	ldr	r1, [pc, #204]	; (8000cb8 <main+0x188>)
 8000bea:	4834      	ldr	r0, [pc, #208]	; (8000cbc <main+0x18c>)
 8000bec:	f001 fd1c 	bl	8002628 <siprintf>
	  		temp_counter=counter_human;
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <main+0x178>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a32      	ldr	r2, [pc, #200]	; (8000cc0 <main+0x190>)
 8000bf6:	6013      	str	r3, [r2, #0]
	  		temp_decade= decade;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <main+0x17c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <main+0x194>)
 8000bfe:	6013      	str	r3, [r2, #0]
	  		temp= 5*temp_decade + temp_counter;
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <main+0x194>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <main+0x190>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <main+0x198>)
 8000c12:	6013      	str	r3, [r2, #0]
	  		lcd_print(2, 1, mesaj_2);
 8000c14:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <main+0x18c>)
 8000c16:	2101      	movs	r1, #1
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fe90 	bl	800093e <lcd_print>
	  		delay_ms(100);
 8000c1e:	2064      	movs	r0, #100	; 0x64
 8000c20:	f7ff fef2 	bl	8000a08 <delay_ms>
 8000c24:	e7b3      	b.n	8000b8e <main+0x5e>
	  	}
	  	else if(selection ==2)
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <main+0x170>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d11b      	bne.n	8000c66 <main+0x136>
	  	{
	  		sprintf(mesaj, "Yolcu Sayisi: %d", decade);
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <main+0x17c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	491e      	ldr	r1, [pc, #120]	; (8000cb0 <main+0x180>)
 8000c36:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <main+0x184>)
 8000c38:	f001 fcf6 	bl	8002628 <siprintf>
	  		lcd_print(1, 1, mesaj);
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <main+0x184>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff fe7c 	bl	800093e <lcd_print>
	  		sprintf(mesaj_2, "Counter:%d", counter_human);
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <main+0x178>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	491a      	ldr	r1, [pc, #104]	; (8000cb8 <main+0x188>)
 8000c4e:	481b      	ldr	r0, [pc, #108]	; (8000cbc <main+0x18c>)
 8000c50:	f001 fcea 	bl	8002628 <siprintf>
	  		lcd_print(2, 1, mesaj_2);
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <main+0x18c>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fe70 	bl	800093e <lcd_print>
	  		delay_ms(100);
 8000c5e:	2064      	movs	r0, #100	; 0x64
 8000c60:	f7ff fed2 	bl	8000a08 <delay_ms>
 8000c64:	e793      	b.n	8000b8e <main+0x5e>
	  	}
	  	else if(selection ==3)
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <main+0x170>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d18f      	bne.n	8000b8e <main+0x5e>
	  	{
	  		sprintf(mesaj, "Yolcu Sayisi:%d", temp);
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <main+0x198>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4915      	ldr	r1, [pc, #84]	; (8000ccc <main+0x19c>)
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <main+0x184>)
 8000c78:	f001 fcd6 	bl	8002628 <siprintf>
	  		lcd_print(1, 1, mesaj);
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <main+0x184>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fe5c 	bl	800093e <lcd_print>
	  		delay_ms(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f7ff febe 	bl	8000a08 <delay_ms>
	  if(selection ==1)
 8000c8c:	e77f      	b.n	8000b8e <main+0x5e>
 8000c8e:	bf00      	nop
 8000c90:	200000d4 	.word	0x200000d4
 8000c94:	08002e5c 	.word	0x08002e5c
 8000c98:	08002e70 	.word	0x08002e70
 8000c9c:	08002e84 	.word	0x08002e84
 8000ca0:	200000ac 	.word	0x200000ac
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	200000b4 	.word	0x200000b4
 8000cac:	200000b0 	.word	0x200000b0
 8000cb0:	08002e94 	.word	0x08002e94
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	08002ea8 	.word	0x08002ea8
 8000cbc:	20000010 	.word	0x20000010
 8000cc0:	200000b8 	.word	0x200000b8
 8000cc4:	200000bc 	.word	0x200000bc
 8000cc8:	200000c0 	.word	0x200000c0
 8000ccc:	08002eb4 	.word	0x08002eb4

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	; 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2230      	movs	r2, #48	; 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fc66 	bl	80025b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <SystemClock_Config+0xb8>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <SystemClock_Config+0xb8>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <SystemClock_Config+0xb8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <SystemClock_Config+0xbc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <SystemClock_Config+0xbc>)
 8000d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <SystemClock_Config+0xbc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fd73 	bl	8001830 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d50:	f000 f8c2 	bl	8000ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 ffce 	bl	8001d10 <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d7a:	f000 f8ad 	bl	8000ed8 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3750      	adds	r7, #80	; 0x50
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000

08000d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <MX_TIM4_Init+0x98>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000db4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000db8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000dc2:	2263      	movs	r2, #99	; 0x63
 8000dc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000dd4:	f001 f934 	bl	8002040 <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000dde:	f000 f87b 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000df0:	f001 f975 	bl	80020de <HAL_TIM_ConfigClockSource>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000dfa:	f000 f86d 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_TIM4_Init+0x94>)
 8000e0c:	f001 fb38 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e16:	f000 f85f 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000d4 	.word	0x200000d4
 8000e28:	40000800 	.word	0x40000800

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_GPIO_Init+0xa0>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_GPIO_Init+0xa0>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_GPIO_Init+0xa0>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f640 71fa 	movw	r1, #4090	; 0xffa
 8000e62:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0xa4>)
 8000e64:	f000 fc98 	bl	8001798 <HAL_GPIO_WritePin>
                          |LCD_RES_Pin|LCD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           Rand_Sig_Pin Start_LED_Pin Pause_LED_Pin Stop_LED_Pin
                           LCD_RES_Pin LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000e68:	f640 73fa 	movw	r3, #4090	; 0xffa
 8000e6c:	607b      	str	r3, [r7, #4]
                          |Rand_Sig_Pin|Start_LED_Pin|Pause_LED_Pin|Stop_LED_Pin
                          |LCD_RES_Pin|LCD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <MX_GPIO_Init+0xa4>)
 8000e80:	f000 faf0 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : Start_Button_Pin Pause_Button_Pin Stop_Button_Pin */
  GPIO_InitStruct.Pin = Start_Button_Pin|Pause_Button_Pin|Stop_Button_Pin;
 8000e84:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_GPIO_Init+0xa8>)
 8000e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4619      	mov	r1, r3
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <MX_GPIO_Init+0xa4>)
 8000e98:	f000 fae4 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Reader_Pin */
  GPIO_InitStruct.Pin = Sensor_Reader_Pin;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Sensor_Reader_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0xa4>)
 8000eae:	f000 fad9 	bl	8001464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	2028      	movs	r0, #40	; 0x28
 8000eb8:	f000 fa9d 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ebc:	2028      	movs	r0, #40	; 0x28
 8000ebe:	f000 fab6 	bl	800142e <HAL_NVIC_EnableIRQ>

}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	10110000 	.word	0x10110000

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ede:	e7fe      	b.n	8000ede <Error_Handler+0x6>

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_TIM_Base_MspInit+0x48>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d115      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_Base_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_TIM_Base_MspInit+0x4c>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_TIM_Base_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	201e      	movs	r0, #30
 8000f64:	f000 fa47 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f68:	201e      	movs	r0, #30
 8000f6a:	f000 fa60 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40000800 	.word	0x40000800
 8000f7c:	40023800 	.word	0x40023800

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f8f6 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */
	  if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET)
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <TIM4_IRQHandler+0x34>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10d      	bne.n	8001002 <TIM4_IRQHandler+0x2e>
	  {
	    if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_UPDATE) != RESET)
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <TIM4_IRQHandler+0x34>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d106      	bne.n	8001002 <TIM4_IRQHandler+0x2e>
	    {
	      __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <TIM4_IRQHandler+0x34>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f06f 0201 	mvn.w	r2, #1
 8000ffc:	611a      	str	r2, [r3, #16]
	       LED_Toggle(); /*Derste de yaptigimiz gibi callback fonksiyonu calismadigi icin kendi callbackimizi olusturduk
 8000ffe:	f7ff fcbd 	bl	800097c <LED_Toggle>
	       	   	   	   	   Yani sistem counter == ARR oldugu zaman buraya gelir bayrak kontrolu yapar ve LED_Toggle fonksiyonunu calistirir*/
	    }
	  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000d4 	.word	0x200000d4

0800100c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001010:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001014:	f000 fbf4 	bl	8001800 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001018:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800101c:	f000 fbf0 	bl	8001800 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001020:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001024:	f000 fbec 	bl	8001800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f001 fa7e 	bl	800255c <__errno>
 8001060:	4602      	mov	r2, r0
 8001062:	230c      	movs	r3, #12
 8001064:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20018000 	.word	0x20018000
 800108c:	00000400 	.word	0x00000400
 8001090:	200000c8 	.word	0x200000c8
 8001094:	20000120 	.word	0x20000120

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <SystemInit+0x28>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <SystemInit+0x28>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SystemInit+0x28>)
 80010ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b2:	609a      	str	r2, [r3, #8]
#endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ca:	e003      	b.n	80010d4 <LoopCopyDataInit>

080010cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010d2:	3104      	adds	r1, #4

080010d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010dc:	d3f6      	bcc.n	80010cc <CopyDataInit>
  ldr  r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e0:	e002      	b.n	80010e8 <LoopFillZerobss>

080010e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e4:	f842 3b04 	str.w	r3, [r2], #4

080010e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010ec:	d3f9      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ee:	f7ff ffd3 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f001 fa39 	bl	8002568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fd1b 	bl	8000b30 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010fc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001100:	08002f18 	.word	0x08002f18
  ldr  r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001108:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800110c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001110:	2000011c 	.word	0x2000011c

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_Init+0x40>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_Init+0x40>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x40>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f94d 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f808 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fec8 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f965 	bl	800144a <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 f92d 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000020 	.word	0x20000020
 80011b4:	20000028 	.word	0x20000028
 80011b8:	20000024 	.word	0x20000024

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000028 	.word	0x20000028
 80011e0:	20000114 	.word	0x20000114

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000114 	.word	0x20000114

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_Delay+0x40>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000028 	.word	0x20000028

08001240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f003 021f 	and.w	r2, r3, #31
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <__NVIC_EnableIRQ+0x38>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff8e 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff29 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff3e 	bl	8001288 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff8e 	bl	8001334 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5d 	bl	80012e0 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff31 	bl	80012a4 <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffa2 	bl	800139c <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e159      	b.n	8001734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001480:	2201      	movs	r2, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	429a      	cmp	r2, r3
 800149a:	f040 8148 	bne.w	800172e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d00b      	beq.n	80014be <HAL_GPIO_Init+0x5a>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b2:	2b11      	cmp	r3, #17
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d130      	bne.n	8001520 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0xfc>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b12      	cmp	r3, #18
 800155e:	d123      	bne.n	80015a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	69b9      	ldr	r1, [r7, #24]
 80015a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0203 	and.w	r2, r3, #3
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a2 	beq.w	800172e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <HAL_GPIO_Init+0x2e4>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a55      	ldr	r2, [pc, #340]	; (8001748 <HAL_GPIO_Init+0x2e4>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_GPIO_Init+0x2e4>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001606:	4a51      	ldr	r2, [pc, #324]	; (800174c <HAL_GPIO_Init+0x2e8>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_GPIO_Init+0x2ec>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x202>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a47      	ldr	r2, [pc, #284]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x1fe>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a46      	ldr	r2, [pc, #280]	; (8001758 <HAL_GPIO_Init+0x2f4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x1fa>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a45      	ldr	r2, [pc, #276]	; (800175c <HAL_GPIO_Init+0x2f8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x1f6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a44      	ldr	r2, [pc, #272]	; (8001760 <HAL_GPIO_Init+0x2fc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x1f2>
 8001652:	2304      	movs	r3, #4
 8001654:	e008      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001656:	2307      	movs	r3, #7
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x204>
 800165a:	2303      	movs	r3, #3
 800165c:	e004      	b.n	8001668 <HAL_GPIO_Init+0x204>
 800165e:	2302      	movs	r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001666:	2300      	movs	r3, #0
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f002 0203 	and.w	r2, r2, #3
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	4093      	lsls	r3, r2
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001678:	4934      	ldr	r1, [pc, #208]	; (800174c <HAL_GPIO_Init+0x2e8>)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <HAL_GPIO_Init+0x300>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <HAL_GPIO_Init+0x300>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016b0:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_GPIO_Init+0x300>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d4:	4a23      	ldr	r2, [pc, #140]	; (8001764 <HAL_GPIO_Init+0x300>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_GPIO_Init+0x300>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_GPIO_Init+0x300>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_GPIO_Init+0x300>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001728:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_GPIO_Init+0x300>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	f67f aea2 	bls.w	8001480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800173c:	bf00      	nop
 800173e:	3724      	adds	r7, #36	; 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40013c00 	.word	0x40013c00

08001768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e001      	b.n	800178a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	401a      	ands	r2, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d104      	bne.n	80017ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	041a      	lsls	r2, r3, #16
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f946 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e25b      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d075      	beq.n	800193a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184e:	4ba3      	ldr	r3, [pc, #652]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d00c      	beq.n	8001874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	4ba0      	ldr	r3, [pc, #640]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001862:	2b08      	cmp	r3, #8
 8001864:	d112      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001866:	4b9d      	ldr	r3, [pc, #628]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001872:	d10b      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	4b99      	ldr	r3, [pc, #612]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05b      	beq.n	8001938 <HAL_RCC_OscConfig+0x108>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d157      	bne.n	8001938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e236      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x74>
 8001896:	4b91      	ldr	r3, [pc, #580]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a90      	ldr	r2, [pc, #576]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a8a      	ldr	r2, [pc, #552]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b88      	ldr	r3, [pc, #544]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a87      	ldr	r2, [pc, #540]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018c8:	4b84      	ldr	r3, [pc, #528]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a83      	ldr	r2, [pc, #524]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b81      	ldr	r3, [pc, #516]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a80      	ldr	r2, [pc, #512]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc7c 	bl	80011e4 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fc78 	bl	80011e4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1fb      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xc0>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fc68 	bl	80011e4 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc64 	bl	80011e4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1e7      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	4b6c      	ldr	r3, [pc, #432]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0xe8>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001946:	4b65      	ldr	r3, [pc, #404]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001952:	4b62      	ldr	r3, [pc, #392]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11c      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e1bb      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b56      	ldr	r3, [pc, #344]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4952      	ldr	r1, [pc, #328]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <HAL_RCC_OscConfig+0x2b0>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fc1d 	bl	80011e4 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fc19 	bl	80011e4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e19c      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b43      	ldr	r3, [pc, #268]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4940      	ldr	r1, [pc, #256]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_OscConfig+0x2b0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fbfc 	bl	80011e4 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fbf8 	bl	80011e4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e17b      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d030      	beq.n	8001a7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_RCC_OscConfig+0x2b4>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff fbdc 	bl	80011e4 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fbd8 	bl	80011e4 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e15b      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x200>
 8001a4e:	e015      	b.n	8001a7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_OscConfig+0x2b4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fbc5 	bl	80011e4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fbc1 	bl	80011e4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e144      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a0 	beq.w	8001bca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10f      	bne.n	8001aba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_OscConfig+0x2b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d121      	bne.n	8001b0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_RCC_OscConfig+0x2b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_RCC_OscConfig+0x2b8>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fb87 	bl	80011e4 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e011      	b.n	8001afe <HAL_RCC_OscConfig+0x2ce>
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	42470000 	.word	0x42470000
 8001ae4:	42470e80 	.word	0x42470e80
 8001ae8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aec:	f7ff fb7a 	bl	80011e4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0fd      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x4d4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d106      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
 8001b12:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a7c      	ldr	r2, [pc, #496]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	e01c      	b.n	8001b5a <HAL_RCC_OscConfig+0x32a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x312>
 8001b28:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a76      	ldr	r2, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a73      	ldr	r2, [pc, #460]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	e00b      	b.n	8001b5a <HAL_RCC_OscConfig+0x32a>
 8001b42:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a70      	ldr	r2, [pc, #448]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4e:	4b6e      	ldr	r3, [pc, #440]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a6d      	ldr	r2, [pc, #436]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d015      	beq.n	8001b8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb3f 	bl	80011e4 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fb3b 	bl	80011e4 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0bc      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	4b61      	ldr	r3, [pc, #388]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ee      	beq.n	8001b6a <HAL_RCC_OscConfig+0x33a>
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb29 	bl	80011e4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff fb25 	bl	80011e4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0a6      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbe:	4b52      	ldr	r3, [pc, #328]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a51      	ldr	r2, [pc, #324]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8092 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd4:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d05c      	beq.n	8001c9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d141      	bne.n	8001c6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be8:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff faf9 	bl	80011e4 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff faf5 	bl	80011e4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e078      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c08:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	019b      	lsls	r3, r3, #6
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	4933      	ldr	r1, [pc, #204]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff face 	bl	80011e4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff faca 	bl	80011e4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e04d      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x41c>
 8001c6a:	e045      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x4dc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fab7 	bl	80011e4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff fab3 	bl	80011e4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e036      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x44a>
 8001c98:	e02e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e029      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_RCC_OscConfig+0x4d8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d115      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40007000 	.word	0x40007000
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	42470060 	.word	0x42470060

08001d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cc      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d90c      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d044      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d119      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e067      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4934      	ldr	r1, [pc, #208]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff f9f0 	bl	80011e4 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f9ec 	bl	80011e4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e04f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d20c      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f950 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023c00 	.word	0x40023c00
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	08002ec4 	.word	0x08002ec4
 8001ed4:	20000020 	.word	0x20000020
 8001ed8:	20000024 	.word	0x20000024

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d007      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x32>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d008      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x38>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 808d 	bne.w	8002022 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f0a:	60bb      	str	r3, [r7, #8]
       break;
 8001f0c:	e08c      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f10:	60bb      	str	r3, [r7, #8]
      break;
 8001f12:	e089      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f1e:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d023      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2a:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	f04f 0400 	mov.w	r4, #0
 8001f34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	ea03 0501 	and.w	r5, r3, r1
 8001f40:	ea04 0602 	and.w	r6, r4, r2
 8001f44:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f46:	fb02 f106 	mul.w	r1, r2, r6
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	fb02 f205 	mul.w	r2, r2, r5
 8001f50:	440a      	add	r2, r1
 8001f52:	493a      	ldr	r1, [pc, #232]	; (800203c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f54:	fba5 0101 	umull	r0, r1, r5, r1
 8001f58:	1853      	adds	r3, r2, r1
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f04f 0400 	mov.w	r4, #0
 8001f62:	461a      	mov	r2, r3
 8001f64:	4623      	mov	r3, r4
 8001f66:	f7fe f98b 	bl	8000280 <__aeabi_uldivmod>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e049      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	ea03 0501 	and.w	r5, r3, r1
 8001f88:	ea04 0602 	and.w	r6, r4, r2
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4632      	mov	r2, r6
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	1b49      	subs	r1, r1, r5
 8001fa6:	eb62 0206 	sbc.w	r2, r2, r6
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0194      	lsls	r4, r2, #6
 8001fb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb8:	018b      	lsls	r3, r1, #6
 8001fba:	1a5b      	subs	r3, r3, r1
 8001fbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	00e2      	lsls	r2, r4, #3
 8001fca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	195b      	adds	r3, r3, r5
 8001fd6:	eb44 0406 	adc.w	r4, r4, r6
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	02a2      	lsls	r2, r4, #10
 8001fe4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fe8:	0299      	lsls	r1, r3, #10
 8001fea:	460b      	mov	r3, r1
 8001fec:	4614      	mov	r4, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f7fe f940 	bl	8000280 <__aeabi_uldivmod>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	3301      	adds	r3, #1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	60bb      	str	r3, [r7, #8]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002024:	60bb      	str	r3, [r7, #8]
      break;
 8002026:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002028:	68bb      	ldr	r3, [r7, #8]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	00f42400 	.word	0x00f42400
 800203c:	017d7840 	.word	0x017d7840

08002040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e01d      	b.n	800208e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe ff62 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f000 f8e4 	bl	800224c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_ConfigClockSource+0x18>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e0a6      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x166>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002114:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800211c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d067      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x120>
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d80b      	bhi.n	800214a <HAL_TIM_ConfigClockSource+0x6c>
 8002132:	2b10      	cmp	r3, #16
 8002134:	d073      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x140>
 8002136:	2b10      	cmp	r3, #16
 8002138:	d802      	bhi.n	8002140 <HAL_TIM_ConfigClockSource+0x62>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06f      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800213e:	e078      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002140:	2b20      	cmp	r3, #32
 8002142:	d06c      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x140>
 8002144:	2b30      	cmp	r3, #48	; 0x30
 8002146:	d06a      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002148:	e073      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800214a:	2b70      	cmp	r3, #112	; 0x70
 800214c:	d00d      	beq.n	800216a <HAL_TIM_ConfigClockSource+0x8c>
 800214e:	2b70      	cmp	r3, #112	; 0x70
 8002150:	d804      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x7e>
 8002152:	2b50      	cmp	r3, #80	; 0x50
 8002154:	d033      	beq.n	80021be <HAL_TIM_ConfigClockSource+0xe0>
 8002156:	2b60      	cmp	r3, #96	; 0x60
 8002158:	d041      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x100>
      break;
 800215a:	e06a      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002160:	d066      	beq.n	8002230 <HAL_TIM_ConfigClockSource+0x152>
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002166:	d017      	beq.n	8002198 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002168:	e063      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f000 f961 	bl	8002440 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800218c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	609a      	str	r2, [r3, #8]
      break;
 8002196:	e04c      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f000 f94a 	bl	8002440 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ba:	609a      	str	r2, [r3, #8]
      break;
 80021bc:	e039      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f000 f8be 	bl	800234c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2150      	movs	r1, #80	; 0x50
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f917 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 80021dc:	e029      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f000 f8dd 	bl	80023aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2160      	movs	r1, #96	; 0x60
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f907 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 80021fc:	e019      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	461a      	mov	r2, r3
 800220c:	f000 f89e 	bl	800234c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2140      	movs	r1, #64	; 0x40
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f8f7 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 800221c:	e009      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f000 f8ee 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 800222e:	e000      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a34      	ldr	r2, [pc, #208]	; (8002330 <TIM_Base_SetConfig+0xe4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00f      	beq.n	8002284 <TIM_Base_SetConfig+0x38>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226a:	d00b      	beq.n	8002284 <TIM_Base_SetConfig+0x38>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a31      	ldr	r2, [pc, #196]	; (8002334 <TIM_Base_SetConfig+0xe8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <TIM_Base_SetConfig+0x38>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a30      	ldr	r2, [pc, #192]	; (8002338 <TIM_Base_SetConfig+0xec>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d003      	beq.n	8002284 <TIM_Base_SetConfig+0x38>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a2f      	ldr	r2, [pc, #188]	; (800233c <TIM_Base_SetConfig+0xf0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d108      	bne.n	8002296 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a25      	ldr	r2, [pc, #148]	; (8002330 <TIM_Base_SetConfig+0xe4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01b      	beq.n	80022d6 <TIM_Base_SetConfig+0x8a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a4:	d017      	beq.n	80022d6 <TIM_Base_SetConfig+0x8a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <TIM_Base_SetConfig+0xe8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <TIM_Base_SetConfig+0x8a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <TIM_Base_SetConfig+0xec>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00f      	beq.n	80022d6 <TIM_Base_SetConfig+0x8a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a20      	ldr	r2, [pc, #128]	; (800233c <TIM_Base_SetConfig+0xf0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00b      	beq.n	80022d6 <TIM_Base_SetConfig+0x8a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <TIM_Base_SetConfig+0xf4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <TIM_Base_SetConfig+0x8a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <TIM_Base_SetConfig+0xf8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d003      	beq.n	80022d6 <TIM_Base_SetConfig+0x8a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <TIM_Base_SetConfig+0xfc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d108      	bne.n	80022e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <TIM_Base_SetConfig+0xe4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d103      	bne.n	800231c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	615a      	str	r2, [r3, #20]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	40000400 	.word	0x40000400
 8002338:	40000800 	.word	0x40000800
 800233c:	40000c00 	.word	0x40000c00
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800

0800234c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0201 	bic.w	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f023 030a 	bic.w	r3, r3, #10
 8002388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	621a      	str	r2, [r3, #32]
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b087      	sub	sp, #28
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0210 	bic.w	r2, r3, #16
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	031b      	lsls	r3, r3, #12
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	f043 0307 	orr.w	r3, r3, #7
 800242c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	021a      	lsls	r2, r3, #8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	431a      	orrs	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e050      	b.n	800253a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d018      	beq.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d013      	beq.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00e      	beq.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a15      	ldr	r2, [pc, #84]	; (8002554 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10c      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4313      	orrs	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40010000 	.word	0x40010000
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800
 8002554:	40000c00 	.word	0x40000c00
 8002558:	40014000 	.word	0x40014000

0800255c <__errno>:
 800255c:	4b01      	ldr	r3, [pc, #4]	; (8002564 <__errno+0x8>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	2000002c 	.word	0x2000002c

08002568 <__libc_init_array>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	4e0d      	ldr	r6, [pc, #52]	; (80025a0 <__libc_init_array+0x38>)
 800256c:	4c0d      	ldr	r4, [pc, #52]	; (80025a4 <__libc_init_array+0x3c>)
 800256e:	1ba4      	subs	r4, r4, r6
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	2500      	movs	r5, #0
 8002574:	42a5      	cmp	r5, r4
 8002576:	d109      	bne.n	800258c <__libc_init_array+0x24>
 8002578:	4e0b      	ldr	r6, [pc, #44]	; (80025a8 <__libc_init_array+0x40>)
 800257a:	4c0c      	ldr	r4, [pc, #48]	; (80025ac <__libc_init_array+0x44>)
 800257c:	f000 fc62 	bl	8002e44 <_init>
 8002580:	1ba4      	subs	r4, r4, r6
 8002582:	10a4      	asrs	r4, r4, #2
 8002584:	2500      	movs	r5, #0
 8002586:	42a5      	cmp	r5, r4
 8002588:	d105      	bne.n	8002596 <__libc_init_array+0x2e>
 800258a:	bd70      	pop	{r4, r5, r6, pc}
 800258c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002590:	4798      	blx	r3
 8002592:	3501      	adds	r5, #1
 8002594:	e7ee      	b.n	8002574 <__libc_init_array+0xc>
 8002596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800259a:	4798      	blx	r3
 800259c:	3501      	adds	r5, #1
 800259e:	e7f2      	b.n	8002586 <__libc_init_array+0x1e>
 80025a0:	08002f10 	.word	0x08002f10
 80025a4:	08002f10 	.word	0x08002f10
 80025a8:	08002f10 	.word	0x08002f10
 80025ac:	08002f14 	.word	0x08002f14

080025b0 <memset>:
 80025b0:	4402      	add	r2, r0
 80025b2:	4603      	mov	r3, r0
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d100      	bne.n	80025ba <memset+0xa>
 80025b8:	4770      	bx	lr
 80025ba:	f803 1b01 	strb.w	r1, [r3], #1
 80025be:	e7f9      	b.n	80025b4 <memset+0x4>

080025c0 <rand>:
 80025c0:	b538      	push	{r3, r4, r5, lr}
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <rand+0x50>)
 80025c4:	681c      	ldr	r4, [r3, #0]
 80025c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025c8:	b97b      	cbnz	r3, 80025ea <rand+0x2a>
 80025ca:	2018      	movs	r0, #24
 80025cc:	f000 f84c 	bl	8002668 <malloc>
 80025d0:	4a10      	ldr	r2, [pc, #64]	; (8002614 <rand+0x54>)
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <rand+0x58>)
 80025d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80025d6:	e9c0 2300 	strd	r2, r3, [r0]
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <rand+0x5c>)
 80025dc:	6083      	str	r3, [r0, #8]
 80025de:	230b      	movs	r3, #11
 80025e0:	8183      	strh	r3, [r0, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	2300      	movs	r3, #0
 80025e6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80025ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <rand+0x60>)
 80025ee:	690a      	ldr	r2, [r1, #16]
 80025f0:	694b      	ldr	r3, [r1, #20]
 80025f2:	4c0c      	ldr	r4, [pc, #48]	; (8002624 <rand+0x64>)
 80025f4:	4350      	muls	r0, r2
 80025f6:	fb04 0003 	mla	r0, r4, r3, r0
 80025fa:	fba2 2304 	umull	r2, r3, r2, r4
 80025fe:	4403      	add	r3, r0
 8002600:	1c54      	adds	r4, r2, #1
 8002602:	f143 0500 	adc.w	r5, r3, #0
 8002606:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800260a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800260e:	bd38      	pop	{r3, r4, r5, pc}
 8002610:	2000002c 	.word	0x2000002c
 8002614:	abcd330e 	.word	0xabcd330e
 8002618:	e66d1234 	.word	0xe66d1234
 800261c:	0005deec 	.word	0x0005deec
 8002620:	5851f42d 	.word	0x5851f42d
 8002624:	4c957f2d 	.word	0x4c957f2d

08002628 <siprintf>:
 8002628:	b40e      	push	{r1, r2, r3}
 800262a:	b500      	push	{lr}
 800262c:	b09c      	sub	sp, #112	; 0x70
 800262e:	ab1d      	add	r3, sp, #116	; 0x74
 8002630:	9002      	str	r0, [sp, #8]
 8002632:	9006      	str	r0, [sp, #24]
 8002634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <siprintf+0x38>)
 800263a:	9107      	str	r1, [sp, #28]
 800263c:	9104      	str	r1, [sp, #16]
 800263e:	4909      	ldr	r1, [pc, #36]	; (8002664 <siprintf+0x3c>)
 8002640:	f853 2b04 	ldr.w	r2, [r3], #4
 8002644:	9105      	str	r1, [sp, #20]
 8002646:	6800      	ldr	r0, [r0, #0]
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	a902      	add	r1, sp, #8
 800264c:	f000 f916 	bl	800287c <_svfiprintf_r>
 8002650:	9b02      	ldr	r3, [sp, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	b01c      	add	sp, #112	; 0x70
 8002658:	f85d eb04 	ldr.w	lr, [sp], #4
 800265c:	b003      	add	sp, #12
 800265e:	4770      	bx	lr
 8002660:	2000002c 	.word	0x2000002c
 8002664:	ffff0208 	.word	0xffff0208

08002668 <malloc>:
 8002668:	4b02      	ldr	r3, [pc, #8]	; (8002674 <malloc+0xc>)
 800266a:	4601      	mov	r1, r0
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	f000 b851 	b.w	8002714 <_malloc_r>
 8002672:	bf00      	nop
 8002674:	2000002c 	.word	0x2000002c

08002678 <_free_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4605      	mov	r5, r0
 800267c:	2900      	cmp	r1, #0
 800267e:	d045      	beq.n	800270c <_free_r+0x94>
 8002680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002684:	1f0c      	subs	r4, r1, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	bfb8      	it	lt
 800268a:	18e4      	addlt	r4, r4, r3
 800268c:	f000 fbaa 	bl	8002de4 <__malloc_lock>
 8002690:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <_free_r+0x98>)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	4610      	mov	r0, r2
 8002696:	b933      	cbnz	r3, 80026a6 <_free_r+0x2e>
 8002698:	6063      	str	r3, [r4, #4]
 800269a:	6014      	str	r4, [r2, #0]
 800269c:	4628      	mov	r0, r5
 800269e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026a2:	f000 bba0 	b.w	8002de6 <__malloc_unlock>
 80026a6:	42a3      	cmp	r3, r4
 80026a8:	d90c      	bls.n	80026c4 <_free_r+0x4c>
 80026aa:	6821      	ldr	r1, [r4, #0]
 80026ac:	1862      	adds	r2, r4, r1
 80026ae:	4293      	cmp	r3, r2
 80026b0:	bf04      	itt	eq
 80026b2:	681a      	ldreq	r2, [r3, #0]
 80026b4:	685b      	ldreq	r3, [r3, #4]
 80026b6:	6063      	str	r3, [r4, #4]
 80026b8:	bf04      	itt	eq
 80026ba:	1852      	addeq	r2, r2, r1
 80026bc:	6022      	streq	r2, [r4, #0]
 80026be:	6004      	str	r4, [r0, #0]
 80026c0:	e7ec      	b.n	800269c <_free_r+0x24>
 80026c2:	4613      	mov	r3, r2
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	b10a      	cbz	r2, 80026cc <_free_r+0x54>
 80026c8:	42a2      	cmp	r2, r4
 80026ca:	d9fa      	bls.n	80026c2 <_free_r+0x4a>
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	1858      	adds	r0, r3, r1
 80026d0:	42a0      	cmp	r0, r4
 80026d2:	d10b      	bne.n	80026ec <_free_r+0x74>
 80026d4:	6820      	ldr	r0, [r4, #0]
 80026d6:	4401      	add	r1, r0
 80026d8:	1858      	adds	r0, r3, r1
 80026da:	4282      	cmp	r2, r0
 80026dc:	6019      	str	r1, [r3, #0]
 80026de:	d1dd      	bne.n	800269c <_free_r+0x24>
 80026e0:	6810      	ldr	r0, [r2, #0]
 80026e2:	6852      	ldr	r2, [r2, #4]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	4401      	add	r1, r0
 80026e8:	6019      	str	r1, [r3, #0]
 80026ea:	e7d7      	b.n	800269c <_free_r+0x24>
 80026ec:	d902      	bls.n	80026f4 <_free_r+0x7c>
 80026ee:	230c      	movs	r3, #12
 80026f0:	602b      	str	r3, [r5, #0]
 80026f2:	e7d3      	b.n	800269c <_free_r+0x24>
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	1821      	adds	r1, r4, r0
 80026f8:	428a      	cmp	r2, r1
 80026fa:	bf04      	itt	eq
 80026fc:	6811      	ldreq	r1, [r2, #0]
 80026fe:	6852      	ldreq	r2, [r2, #4]
 8002700:	6062      	str	r2, [r4, #4]
 8002702:	bf04      	itt	eq
 8002704:	1809      	addeq	r1, r1, r0
 8002706:	6021      	streq	r1, [r4, #0]
 8002708:	605c      	str	r4, [r3, #4]
 800270a:	e7c7      	b.n	800269c <_free_r+0x24>
 800270c:	bd38      	pop	{r3, r4, r5, pc}
 800270e:	bf00      	nop
 8002710:	200000cc 	.word	0x200000cc

08002714 <_malloc_r>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	1ccd      	adds	r5, r1, #3
 8002718:	f025 0503 	bic.w	r5, r5, #3
 800271c:	3508      	adds	r5, #8
 800271e:	2d0c      	cmp	r5, #12
 8002720:	bf38      	it	cc
 8002722:	250c      	movcc	r5, #12
 8002724:	2d00      	cmp	r5, #0
 8002726:	4606      	mov	r6, r0
 8002728:	db01      	blt.n	800272e <_malloc_r+0x1a>
 800272a:	42a9      	cmp	r1, r5
 800272c:	d903      	bls.n	8002736 <_malloc_r+0x22>
 800272e:	230c      	movs	r3, #12
 8002730:	6033      	str	r3, [r6, #0]
 8002732:	2000      	movs	r0, #0
 8002734:	bd70      	pop	{r4, r5, r6, pc}
 8002736:	f000 fb55 	bl	8002de4 <__malloc_lock>
 800273a:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <_malloc_r+0xac>)
 800273c:	6814      	ldr	r4, [r2, #0]
 800273e:	4621      	mov	r1, r4
 8002740:	b991      	cbnz	r1, 8002768 <_malloc_r+0x54>
 8002742:	4c20      	ldr	r4, [pc, #128]	; (80027c4 <_malloc_r+0xb0>)
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	b91b      	cbnz	r3, 8002750 <_malloc_r+0x3c>
 8002748:	4630      	mov	r0, r6
 800274a:	f000 fb17 	bl	8002d7c <_sbrk_r>
 800274e:	6020      	str	r0, [r4, #0]
 8002750:	4629      	mov	r1, r5
 8002752:	4630      	mov	r0, r6
 8002754:	f000 fb12 	bl	8002d7c <_sbrk_r>
 8002758:	1c43      	adds	r3, r0, #1
 800275a:	d124      	bne.n	80027a6 <_malloc_r+0x92>
 800275c:	230c      	movs	r3, #12
 800275e:	6033      	str	r3, [r6, #0]
 8002760:	4630      	mov	r0, r6
 8002762:	f000 fb40 	bl	8002de6 <__malloc_unlock>
 8002766:	e7e4      	b.n	8002732 <_malloc_r+0x1e>
 8002768:	680b      	ldr	r3, [r1, #0]
 800276a:	1b5b      	subs	r3, r3, r5
 800276c:	d418      	bmi.n	80027a0 <_malloc_r+0x8c>
 800276e:	2b0b      	cmp	r3, #11
 8002770:	d90f      	bls.n	8002792 <_malloc_r+0x7e>
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	50cd      	str	r5, [r1, r3]
 8002776:	18cc      	adds	r4, r1, r3
 8002778:	4630      	mov	r0, r6
 800277a:	f000 fb34 	bl	8002de6 <__malloc_unlock>
 800277e:	f104 000b 	add.w	r0, r4, #11
 8002782:	1d23      	adds	r3, r4, #4
 8002784:	f020 0007 	bic.w	r0, r0, #7
 8002788:	1ac3      	subs	r3, r0, r3
 800278a:	d0d3      	beq.n	8002734 <_malloc_r+0x20>
 800278c:	425a      	negs	r2, r3
 800278e:	50e2      	str	r2, [r4, r3]
 8002790:	e7d0      	b.n	8002734 <_malloc_r+0x20>
 8002792:	428c      	cmp	r4, r1
 8002794:	684b      	ldr	r3, [r1, #4]
 8002796:	bf16      	itet	ne
 8002798:	6063      	strne	r3, [r4, #4]
 800279a:	6013      	streq	r3, [r2, #0]
 800279c:	460c      	movne	r4, r1
 800279e:	e7eb      	b.n	8002778 <_malloc_r+0x64>
 80027a0:	460c      	mov	r4, r1
 80027a2:	6849      	ldr	r1, [r1, #4]
 80027a4:	e7cc      	b.n	8002740 <_malloc_r+0x2c>
 80027a6:	1cc4      	adds	r4, r0, #3
 80027a8:	f024 0403 	bic.w	r4, r4, #3
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d005      	beq.n	80027bc <_malloc_r+0xa8>
 80027b0:	1a21      	subs	r1, r4, r0
 80027b2:	4630      	mov	r0, r6
 80027b4:	f000 fae2 	bl	8002d7c <_sbrk_r>
 80027b8:	3001      	adds	r0, #1
 80027ba:	d0cf      	beq.n	800275c <_malloc_r+0x48>
 80027bc:	6025      	str	r5, [r4, #0]
 80027be:	e7db      	b.n	8002778 <_malloc_r+0x64>
 80027c0:	200000cc 	.word	0x200000cc
 80027c4:	200000d0 	.word	0x200000d0

080027c8 <__ssputs_r>:
 80027c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027cc:	688e      	ldr	r6, [r1, #8]
 80027ce:	429e      	cmp	r6, r3
 80027d0:	4682      	mov	sl, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	4690      	mov	r8, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	d837      	bhi.n	800284a <__ssputs_r+0x82>
 80027da:	898a      	ldrh	r2, [r1, #12]
 80027dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027e0:	d031      	beq.n	8002846 <__ssputs_r+0x7e>
 80027e2:	6825      	ldr	r5, [r4, #0]
 80027e4:	6909      	ldr	r1, [r1, #16]
 80027e6:	1a6f      	subs	r7, r5, r1
 80027e8:	6965      	ldr	r5, [r4, #20]
 80027ea:	2302      	movs	r3, #2
 80027ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80027f4:	f109 0301 	add.w	r3, r9, #1
 80027f8:	443b      	add	r3, r7
 80027fa:	429d      	cmp	r5, r3
 80027fc:	bf38      	it	cc
 80027fe:	461d      	movcc	r5, r3
 8002800:	0553      	lsls	r3, r2, #21
 8002802:	d530      	bpl.n	8002866 <__ssputs_r+0x9e>
 8002804:	4629      	mov	r1, r5
 8002806:	f7ff ff85 	bl	8002714 <_malloc_r>
 800280a:	4606      	mov	r6, r0
 800280c:	b950      	cbnz	r0, 8002824 <__ssputs_r+0x5c>
 800280e:	230c      	movs	r3, #12
 8002810:	f8ca 3000 	str.w	r3, [sl]
 8002814:	89a3      	ldrh	r3, [r4, #12]
 8002816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800281a:	81a3      	strh	r3, [r4, #12]
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002824:	463a      	mov	r2, r7
 8002826:	6921      	ldr	r1, [r4, #16]
 8002828:	f000 fab8 	bl	8002d9c <memcpy>
 800282c:	89a3      	ldrh	r3, [r4, #12]
 800282e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002836:	81a3      	strh	r3, [r4, #12]
 8002838:	6126      	str	r6, [r4, #16]
 800283a:	6165      	str	r5, [r4, #20]
 800283c:	443e      	add	r6, r7
 800283e:	1bed      	subs	r5, r5, r7
 8002840:	6026      	str	r6, [r4, #0]
 8002842:	60a5      	str	r5, [r4, #8]
 8002844:	464e      	mov	r6, r9
 8002846:	454e      	cmp	r6, r9
 8002848:	d900      	bls.n	800284c <__ssputs_r+0x84>
 800284a:	464e      	mov	r6, r9
 800284c:	4632      	mov	r2, r6
 800284e:	4641      	mov	r1, r8
 8002850:	6820      	ldr	r0, [r4, #0]
 8002852:	f000 faae 	bl	8002db2 <memmove>
 8002856:	68a3      	ldr	r3, [r4, #8]
 8002858:	1b9b      	subs	r3, r3, r6
 800285a:	60a3      	str	r3, [r4, #8]
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	441e      	add	r6, r3
 8002860:	6026      	str	r6, [r4, #0]
 8002862:	2000      	movs	r0, #0
 8002864:	e7dc      	b.n	8002820 <__ssputs_r+0x58>
 8002866:	462a      	mov	r2, r5
 8002868:	f000 fabe 	bl	8002de8 <_realloc_r>
 800286c:	4606      	mov	r6, r0
 800286e:	2800      	cmp	r0, #0
 8002870:	d1e2      	bne.n	8002838 <__ssputs_r+0x70>
 8002872:	6921      	ldr	r1, [r4, #16]
 8002874:	4650      	mov	r0, sl
 8002876:	f7ff feff 	bl	8002678 <_free_r>
 800287a:	e7c8      	b.n	800280e <__ssputs_r+0x46>

0800287c <_svfiprintf_r>:
 800287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002880:	461d      	mov	r5, r3
 8002882:	898b      	ldrh	r3, [r1, #12]
 8002884:	061f      	lsls	r7, r3, #24
 8002886:	b09d      	sub	sp, #116	; 0x74
 8002888:	4680      	mov	r8, r0
 800288a:	460c      	mov	r4, r1
 800288c:	4616      	mov	r6, r2
 800288e:	d50f      	bpl.n	80028b0 <_svfiprintf_r+0x34>
 8002890:	690b      	ldr	r3, [r1, #16]
 8002892:	b96b      	cbnz	r3, 80028b0 <_svfiprintf_r+0x34>
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	f7ff ff3d 	bl	8002714 <_malloc_r>
 800289a:	6020      	str	r0, [r4, #0]
 800289c:	6120      	str	r0, [r4, #16]
 800289e:	b928      	cbnz	r0, 80028ac <_svfiprintf_r+0x30>
 80028a0:	230c      	movs	r3, #12
 80028a2:	f8c8 3000 	str.w	r3, [r8]
 80028a6:	f04f 30ff 	mov.w	r0, #4294967295
 80028aa:	e0c8      	b.n	8002a3e <_svfiprintf_r+0x1c2>
 80028ac:	2340      	movs	r3, #64	; 0x40
 80028ae:	6163      	str	r3, [r4, #20]
 80028b0:	2300      	movs	r3, #0
 80028b2:	9309      	str	r3, [sp, #36]	; 0x24
 80028b4:	2320      	movs	r3, #32
 80028b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028ba:	2330      	movs	r3, #48	; 0x30
 80028bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028c0:	9503      	str	r5, [sp, #12]
 80028c2:	f04f 0b01 	mov.w	fp, #1
 80028c6:	4637      	mov	r7, r6
 80028c8:	463d      	mov	r5, r7
 80028ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028ce:	b10b      	cbz	r3, 80028d4 <_svfiprintf_r+0x58>
 80028d0:	2b25      	cmp	r3, #37	; 0x25
 80028d2:	d13e      	bne.n	8002952 <_svfiprintf_r+0xd6>
 80028d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80028d8:	d00b      	beq.n	80028f2 <_svfiprintf_r+0x76>
 80028da:	4653      	mov	r3, sl
 80028dc:	4632      	mov	r2, r6
 80028de:	4621      	mov	r1, r4
 80028e0:	4640      	mov	r0, r8
 80028e2:	f7ff ff71 	bl	80027c8 <__ssputs_r>
 80028e6:	3001      	adds	r0, #1
 80028e8:	f000 80a4 	beq.w	8002a34 <_svfiprintf_r+0x1b8>
 80028ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ee:	4453      	add	r3, sl
 80028f0:	9309      	str	r3, [sp, #36]	; 0x24
 80028f2:	783b      	ldrb	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 809d 	beq.w	8002a34 <_svfiprintf_r+0x1b8>
 80028fa:	2300      	movs	r3, #0
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002904:	9304      	str	r3, [sp, #16]
 8002906:	9307      	str	r3, [sp, #28]
 8002908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800290c:	931a      	str	r3, [sp, #104]	; 0x68
 800290e:	462f      	mov	r7, r5
 8002910:	2205      	movs	r2, #5
 8002912:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002916:	4850      	ldr	r0, [pc, #320]	; (8002a58 <_svfiprintf_r+0x1dc>)
 8002918:	f7fd fc62 	bl	80001e0 <memchr>
 800291c:	9b04      	ldr	r3, [sp, #16]
 800291e:	b9d0      	cbnz	r0, 8002956 <_svfiprintf_r+0xda>
 8002920:	06d9      	lsls	r1, r3, #27
 8002922:	bf44      	itt	mi
 8002924:	2220      	movmi	r2, #32
 8002926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800292a:	071a      	lsls	r2, r3, #28
 800292c:	bf44      	itt	mi
 800292e:	222b      	movmi	r2, #43	; 0x2b
 8002930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002934:	782a      	ldrb	r2, [r5, #0]
 8002936:	2a2a      	cmp	r2, #42	; 0x2a
 8002938:	d015      	beq.n	8002966 <_svfiprintf_r+0xea>
 800293a:	9a07      	ldr	r2, [sp, #28]
 800293c:	462f      	mov	r7, r5
 800293e:	2000      	movs	r0, #0
 8002940:	250a      	movs	r5, #10
 8002942:	4639      	mov	r1, r7
 8002944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002948:	3b30      	subs	r3, #48	; 0x30
 800294a:	2b09      	cmp	r3, #9
 800294c:	d94d      	bls.n	80029ea <_svfiprintf_r+0x16e>
 800294e:	b1b8      	cbz	r0, 8002980 <_svfiprintf_r+0x104>
 8002950:	e00f      	b.n	8002972 <_svfiprintf_r+0xf6>
 8002952:	462f      	mov	r7, r5
 8002954:	e7b8      	b.n	80028c8 <_svfiprintf_r+0x4c>
 8002956:	4a40      	ldr	r2, [pc, #256]	; (8002a58 <_svfiprintf_r+0x1dc>)
 8002958:	1a80      	subs	r0, r0, r2
 800295a:	fa0b f000 	lsl.w	r0, fp, r0
 800295e:	4318      	orrs	r0, r3
 8002960:	9004      	str	r0, [sp, #16]
 8002962:	463d      	mov	r5, r7
 8002964:	e7d3      	b.n	800290e <_svfiprintf_r+0x92>
 8002966:	9a03      	ldr	r2, [sp, #12]
 8002968:	1d11      	adds	r1, r2, #4
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	9103      	str	r1, [sp, #12]
 800296e:	2a00      	cmp	r2, #0
 8002970:	db01      	blt.n	8002976 <_svfiprintf_r+0xfa>
 8002972:	9207      	str	r2, [sp, #28]
 8002974:	e004      	b.n	8002980 <_svfiprintf_r+0x104>
 8002976:	4252      	negs	r2, r2
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	9207      	str	r2, [sp, #28]
 800297e:	9304      	str	r3, [sp, #16]
 8002980:	783b      	ldrb	r3, [r7, #0]
 8002982:	2b2e      	cmp	r3, #46	; 0x2e
 8002984:	d10c      	bne.n	80029a0 <_svfiprintf_r+0x124>
 8002986:	787b      	ldrb	r3, [r7, #1]
 8002988:	2b2a      	cmp	r3, #42	; 0x2a
 800298a:	d133      	bne.n	80029f4 <_svfiprintf_r+0x178>
 800298c:	9b03      	ldr	r3, [sp, #12]
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	9203      	str	r2, [sp, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	bfb8      	it	lt
 8002998:	f04f 33ff 	movlt.w	r3, #4294967295
 800299c:	3702      	adds	r7, #2
 800299e:	9305      	str	r3, [sp, #20]
 80029a0:	4d2e      	ldr	r5, [pc, #184]	; (8002a5c <_svfiprintf_r+0x1e0>)
 80029a2:	7839      	ldrb	r1, [r7, #0]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4628      	mov	r0, r5
 80029a8:	f7fd fc1a 	bl	80001e0 <memchr>
 80029ac:	b138      	cbz	r0, 80029be <_svfiprintf_r+0x142>
 80029ae:	2340      	movs	r3, #64	; 0x40
 80029b0:	1b40      	subs	r0, r0, r5
 80029b2:	fa03 f000 	lsl.w	r0, r3, r0
 80029b6:	9b04      	ldr	r3, [sp, #16]
 80029b8:	4303      	orrs	r3, r0
 80029ba:	3701      	adds	r7, #1
 80029bc:	9304      	str	r3, [sp, #16]
 80029be:	7839      	ldrb	r1, [r7, #0]
 80029c0:	4827      	ldr	r0, [pc, #156]	; (8002a60 <_svfiprintf_r+0x1e4>)
 80029c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029c6:	2206      	movs	r2, #6
 80029c8:	1c7e      	adds	r6, r7, #1
 80029ca:	f7fd fc09 	bl	80001e0 <memchr>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d038      	beq.n	8002a44 <_svfiprintf_r+0x1c8>
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <_svfiprintf_r+0x1e8>)
 80029d4:	bb13      	cbnz	r3, 8002a1c <_svfiprintf_r+0x1a0>
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	3307      	adds	r3, #7
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	3308      	adds	r3, #8
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e4:	444b      	add	r3, r9
 80029e6:	9309      	str	r3, [sp, #36]	; 0x24
 80029e8:	e76d      	b.n	80028c6 <_svfiprintf_r+0x4a>
 80029ea:	fb05 3202 	mla	r2, r5, r2, r3
 80029ee:	2001      	movs	r0, #1
 80029f0:	460f      	mov	r7, r1
 80029f2:	e7a6      	b.n	8002942 <_svfiprintf_r+0xc6>
 80029f4:	2300      	movs	r3, #0
 80029f6:	3701      	adds	r7, #1
 80029f8:	9305      	str	r3, [sp, #20]
 80029fa:	4619      	mov	r1, r3
 80029fc:	250a      	movs	r5, #10
 80029fe:	4638      	mov	r0, r7
 8002a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a04:	3a30      	subs	r2, #48	; 0x30
 8002a06:	2a09      	cmp	r2, #9
 8002a08:	d903      	bls.n	8002a12 <_svfiprintf_r+0x196>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0c8      	beq.n	80029a0 <_svfiprintf_r+0x124>
 8002a0e:	9105      	str	r1, [sp, #20]
 8002a10:	e7c6      	b.n	80029a0 <_svfiprintf_r+0x124>
 8002a12:	fb05 2101 	mla	r1, r5, r1, r2
 8002a16:	2301      	movs	r3, #1
 8002a18:	4607      	mov	r7, r0
 8002a1a:	e7f0      	b.n	80029fe <_svfiprintf_r+0x182>
 8002a1c:	ab03      	add	r3, sp, #12
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4622      	mov	r2, r4
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_svfiprintf_r+0x1ec>)
 8002a24:	a904      	add	r1, sp, #16
 8002a26:	4640      	mov	r0, r8
 8002a28:	f3af 8000 	nop.w
 8002a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a30:	4681      	mov	r9, r0
 8002a32:	d1d6      	bne.n	80029e2 <_svfiprintf_r+0x166>
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	065b      	lsls	r3, r3, #25
 8002a38:	f53f af35 	bmi.w	80028a6 <_svfiprintf_r+0x2a>
 8002a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a3e:	b01d      	add	sp, #116	; 0x74
 8002a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a44:	ab03      	add	r3, sp, #12
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4622      	mov	r2, r4
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <_svfiprintf_r+0x1ec>)
 8002a4c:	a904      	add	r1, sp, #16
 8002a4e:	4640      	mov	r0, r8
 8002a50:	f000 f882 	bl	8002b58 <_printf_i>
 8002a54:	e7ea      	b.n	8002a2c <_svfiprintf_r+0x1b0>
 8002a56:	bf00      	nop
 8002a58:	08002ed4 	.word	0x08002ed4
 8002a5c:	08002eda 	.word	0x08002eda
 8002a60:	08002ede 	.word	0x08002ede
 8002a64:	00000000 	.word	0x00000000
 8002a68:	080027c9 	.word	0x080027c9

08002a6c <_printf_common>:
 8002a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a70:	4691      	mov	r9, r2
 8002a72:	461f      	mov	r7, r3
 8002a74:	688a      	ldr	r2, [r1, #8]
 8002a76:	690b      	ldr	r3, [r1, #16]
 8002a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bfb8      	it	lt
 8002a80:	4613      	movlt	r3, r2
 8002a82:	f8c9 3000 	str.w	r3, [r9]
 8002a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a8a:	4606      	mov	r6, r0
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	b112      	cbz	r2, 8002a96 <_printf_common+0x2a>
 8002a90:	3301      	adds	r3, #1
 8002a92:	f8c9 3000 	str.w	r3, [r9]
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	0699      	lsls	r1, r3, #26
 8002a9a:	bf42      	ittt	mi
 8002a9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002aa0:	3302      	addmi	r3, #2
 8002aa2:	f8c9 3000 	strmi.w	r3, [r9]
 8002aa6:	6825      	ldr	r5, [r4, #0]
 8002aa8:	f015 0506 	ands.w	r5, r5, #6
 8002aac:	d107      	bne.n	8002abe <_printf_common+0x52>
 8002aae:	f104 0a19 	add.w	sl, r4, #25
 8002ab2:	68e3      	ldr	r3, [r4, #12]
 8002ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	42ab      	cmp	r3, r5
 8002abc:	dc28      	bgt.n	8002b10 <_printf_common+0xa4>
 8002abe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	3300      	adds	r3, #0
 8002ac6:	bf18      	it	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	0692      	lsls	r2, r2, #26
 8002acc:	d42d      	bmi.n	8002b2a <_printf_common+0xbe>
 8002ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ad2:	4639      	mov	r1, r7
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	47c0      	blx	r8
 8002ad8:	3001      	adds	r0, #1
 8002ada:	d020      	beq.n	8002b1e <_printf_common+0xb2>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	68e5      	ldr	r5, [r4, #12]
 8002ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ae4:	f003 0306 	and.w	r3, r3, #6
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	bf08      	it	eq
 8002aec:	1aad      	subeq	r5, r5, r2
 8002aee:	68a3      	ldr	r3, [r4, #8]
 8002af0:	6922      	ldr	r2, [r4, #16]
 8002af2:	bf0c      	ite	eq
 8002af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002af8:	2500      	movne	r5, #0
 8002afa:	4293      	cmp	r3, r2
 8002afc:	bfc4      	itt	gt
 8002afe:	1a9b      	subgt	r3, r3, r2
 8002b00:	18ed      	addgt	r5, r5, r3
 8002b02:	f04f 0900 	mov.w	r9, #0
 8002b06:	341a      	adds	r4, #26
 8002b08:	454d      	cmp	r5, r9
 8002b0a:	d11a      	bne.n	8002b42 <_printf_common+0xd6>
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	e008      	b.n	8002b22 <_printf_common+0xb6>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4652      	mov	r2, sl
 8002b14:	4639      	mov	r1, r7
 8002b16:	4630      	mov	r0, r6
 8002b18:	47c0      	blx	r8
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d103      	bne.n	8002b26 <_printf_common+0xba>
 8002b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b26:	3501      	adds	r5, #1
 8002b28:	e7c3      	b.n	8002ab2 <_printf_common+0x46>
 8002b2a:	18e1      	adds	r1, r4, r3
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	2030      	movs	r0, #48	; 0x30
 8002b30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b34:	4422      	add	r2, r4
 8002b36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b3e:	3302      	adds	r3, #2
 8002b40:	e7c5      	b.n	8002ace <_printf_common+0x62>
 8002b42:	2301      	movs	r3, #1
 8002b44:	4622      	mov	r2, r4
 8002b46:	4639      	mov	r1, r7
 8002b48:	4630      	mov	r0, r6
 8002b4a:	47c0      	blx	r8
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d0e6      	beq.n	8002b1e <_printf_common+0xb2>
 8002b50:	f109 0901 	add.w	r9, r9, #1
 8002b54:	e7d8      	b.n	8002b08 <_printf_common+0x9c>
	...

08002b58 <_printf_i>:
 8002b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b60:	460c      	mov	r4, r1
 8002b62:	7e09      	ldrb	r1, [r1, #24]
 8002b64:	b085      	sub	sp, #20
 8002b66:	296e      	cmp	r1, #110	; 0x6e
 8002b68:	4617      	mov	r7, r2
 8002b6a:	4606      	mov	r6, r0
 8002b6c:	4698      	mov	r8, r3
 8002b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b70:	f000 80b3 	beq.w	8002cda <_printf_i+0x182>
 8002b74:	d822      	bhi.n	8002bbc <_printf_i+0x64>
 8002b76:	2963      	cmp	r1, #99	; 0x63
 8002b78:	d036      	beq.n	8002be8 <_printf_i+0x90>
 8002b7a:	d80a      	bhi.n	8002b92 <_printf_i+0x3a>
 8002b7c:	2900      	cmp	r1, #0
 8002b7e:	f000 80b9 	beq.w	8002cf4 <_printf_i+0x19c>
 8002b82:	2958      	cmp	r1, #88	; 0x58
 8002b84:	f000 8083 	beq.w	8002c8e <_printf_i+0x136>
 8002b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b90:	e032      	b.n	8002bf8 <_printf_i+0xa0>
 8002b92:	2964      	cmp	r1, #100	; 0x64
 8002b94:	d001      	beq.n	8002b9a <_printf_i+0x42>
 8002b96:	2969      	cmp	r1, #105	; 0x69
 8002b98:	d1f6      	bne.n	8002b88 <_printf_i+0x30>
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	6813      	ldr	r3, [r2, #0]
 8002b9e:	0605      	lsls	r5, r0, #24
 8002ba0:	f103 0104 	add.w	r1, r3, #4
 8002ba4:	d52a      	bpl.n	8002bfc <_printf_i+0xa4>
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da03      	bge.n	8002bb6 <_printf_i+0x5e>
 8002bae:	222d      	movs	r2, #45	; 0x2d
 8002bb0:	425b      	negs	r3, r3
 8002bb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bb6:	486f      	ldr	r0, [pc, #444]	; (8002d74 <_printf_i+0x21c>)
 8002bb8:	220a      	movs	r2, #10
 8002bba:	e039      	b.n	8002c30 <_printf_i+0xd8>
 8002bbc:	2973      	cmp	r1, #115	; 0x73
 8002bbe:	f000 809d 	beq.w	8002cfc <_printf_i+0x1a4>
 8002bc2:	d808      	bhi.n	8002bd6 <_printf_i+0x7e>
 8002bc4:	296f      	cmp	r1, #111	; 0x6f
 8002bc6:	d020      	beq.n	8002c0a <_printf_i+0xb2>
 8002bc8:	2970      	cmp	r1, #112	; 0x70
 8002bca:	d1dd      	bne.n	8002b88 <_printf_i+0x30>
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	f043 0320 	orr.w	r3, r3, #32
 8002bd2:	6023      	str	r3, [r4, #0]
 8002bd4:	e003      	b.n	8002bde <_printf_i+0x86>
 8002bd6:	2975      	cmp	r1, #117	; 0x75
 8002bd8:	d017      	beq.n	8002c0a <_printf_i+0xb2>
 8002bda:	2978      	cmp	r1, #120	; 0x78
 8002bdc:	d1d4      	bne.n	8002b88 <_printf_i+0x30>
 8002bde:	2378      	movs	r3, #120	; 0x78
 8002be0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002be4:	4864      	ldr	r0, [pc, #400]	; (8002d78 <_printf_i+0x220>)
 8002be6:	e055      	b.n	8002c94 <_printf_i+0x13c>
 8002be8:	6813      	ldr	r3, [r2, #0]
 8002bea:	1d19      	adds	r1, r3, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6011      	str	r1, [r2, #0]
 8002bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e08c      	b.n	8002d16 <_printf_i+0x1be>
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6011      	str	r1, [r2, #0]
 8002c00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c04:	bf18      	it	ne
 8002c06:	b21b      	sxthne	r3, r3
 8002c08:	e7cf      	b.n	8002baa <_printf_i+0x52>
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	6825      	ldr	r5, [r4, #0]
 8002c0e:	1d18      	adds	r0, r3, #4
 8002c10:	6010      	str	r0, [r2, #0]
 8002c12:	0628      	lsls	r0, r5, #24
 8002c14:	d501      	bpl.n	8002c1a <_printf_i+0xc2>
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	e002      	b.n	8002c20 <_printf_i+0xc8>
 8002c1a:	0668      	lsls	r0, r5, #25
 8002c1c:	d5fb      	bpl.n	8002c16 <_printf_i+0xbe>
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	4854      	ldr	r0, [pc, #336]	; (8002d74 <_printf_i+0x21c>)
 8002c22:	296f      	cmp	r1, #111	; 0x6f
 8002c24:	bf14      	ite	ne
 8002c26:	220a      	movne	r2, #10
 8002c28:	2208      	moveq	r2, #8
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c30:	6865      	ldr	r5, [r4, #4]
 8002c32:	60a5      	str	r5, [r4, #8]
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	f2c0 8095 	blt.w	8002d64 <_printf_i+0x20c>
 8002c3a:	6821      	ldr	r1, [r4, #0]
 8002c3c:	f021 0104 	bic.w	r1, r1, #4
 8002c40:	6021      	str	r1, [r4, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d13d      	bne.n	8002cc2 <_printf_i+0x16a>
 8002c46:	2d00      	cmp	r5, #0
 8002c48:	f040 808e 	bne.w	8002d68 <_printf_i+0x210>
 8002c4c:	4665      	mov	r5, ip
 8002c4e:	2a08      	cmp	r2, #8
 8002c50:	d10b      	bne.n	8002c6a <_printf_i+0x112>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	07db      	lsls	r3, r3, #31
 8002c56:	d508      	bpl.n	8002c6a <_printf_i+0x112>
 8002c58:	6923      	ldr	r3, [r4, #16]
 8002c5a:	6862      	ldr	r2, [r4, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	bfde      	ittt	le
 8002c60:	2330      	movle	r3, #48	; 0x30
 8002c62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c6a:	ebac 0305 	sub.w	r3, ip, r5
 8002c6e:	6123      	str	r3, [r4, #16]
 8002c70:	f8cd 8000 	str.w	r8, [sp]
 8002c74:	463b      	mov	r3, r7
 8002c76:	aa03      	add	r2, sp, #12
 8002c78:	4621      	mov	r1, r4
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f7ff fef6 	bl	8002a6c <_printf_common>
 8002c80:	3001      	adds	r0, #1
 8002c82:	d14d      	bne.n	8002d20 <_printf_i+0x1c8>
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	b005      	add	sp, #20
 8002c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c8e:	4839      	ldr	r0, [pc, #228]	; (8002d74 <_printf_i+0x21c>)
 8002c90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c94:	6813      	ldr	r3, [r2, #0]
 8002c96:	6821      	ldr	r1, [r4, #0]
 8002c98:	1d1d      	adds	r5, r3, #4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6015      	str	r5, [r2, #0]
 8002c9e:	060a      	lsls	r2, r1, #24
 8002ca0:	d50b      	bpl.n	8002cba <_printf_i+0x162>
 8002ca2:	07ca      	lsls	r2, r1, #31
 8002ca4:	bf44      	itt	mi
 8002ca6:	f041 0120 	orrmi.w	r1, r1, #32
 8002caa:	6021      	strmi	r1, [r4, #0]
 8002cac:	b91b      	cbnz	r3, 8002cb6 <_printf_i+0x15e>
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	f022 0220 	bic.w	r2, r2, #32
 8002cb4:	6022      	str	r2, [r4, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	e7b7      	b.n	8002c2a <_printf_i+0xd2>
 8002cba:	064d      	lsls	r5, r1, #25
 8002cbc:	bf48      	it	mi
 8002cbe:	b29b      	uxthmi	r3, r3
 8002cc0:	e7ef      	b.n	8002ca2 <_printf_i+0x14a>
 8002cc2:	4665      	mov	r5, ip
 8002cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cc8:	fb02 3311 	mls	r3, r2, r1, r3
 8002ccc:	5cc3      	ldrb	r3, [r0, r3]
 8002cce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	2900      	cmp	r1, #0
 8002cd6:	d1f5      	bne.n	8002cc4 <_printf_i+0x16c>
 8002cd8:	e7b9      	b.n	8002c4e <_printf_i+0xf6>
 8002cda:	6813      	ldr	r3, [r2, #0]
 8002cdc:	6825      	ldr	r5, [r4, #0]
 8002cde:	6961      	ldr	r1, [r4, #20]
 8002ce0:	1d18      	adds	r0, r3, #4
 8002ce2:	6010      	str	r0, [r2, #0]
 8002ce4:	0628      	lsls	r0, r5, #24
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	d501      	bpl.n	8002cee <_printf_i+0x196>
 8002cea:	6019      	str	r1, [r3, #0]
 8002cec:	e002      	b.n	8002cf4 <_printf_i+0x19c>
 8002cee:	066a      	lsls	r2, r5, #25
 8002cf0:	d5fb      	bpl.n	8002cea <_printf_i+0x192>
 8002cf2:	8019      	strh	r1, [r3, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6123      	str	r3, [r4, #16]
 8002cf8:	4665      	mov	r5, ip
 8002cfa:	e7b9      	b.n	8002c70 <_printf_i+0x118>
 8002cfc:	6813      	ldr	r3, [r2, #0]
 8002cfe:	1d19      	adds	r1, r3, #4
 8002d00:	6011      	str	r1, [r2, #0]
 8002d02:	681d      	ldr	r5, [r3, #0]
 8002d04:	6862      	ldr	r2, [r4, #4]
 8002d06:	2100      	movs	r1, #0
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f7fd fa69 	bl	80001e0 <memchr>
 8002d0e:	b108      	cbz	r0, 8002d14 <_printf_i+0x1bc>
 8002d10:	1b40      	subs	r0, r0, r5
 8002d12:	6060      	str	r0, [r4, #4]
 8002d14:	6863      	ldr	r3, [r4, #4]
 8002d16:	6123      	str	r3, [r4, #16]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d1e:	e7a7      	b.n	8002c70 <_printf_i+0x118>
 8002d20:	6923      	ldr	r3, [r4, #16]
 8002d22:	462a      	mov	r2, r5
 8002d24:	4639      	mov	r1, r7
 8002d26:	4630      	mov	r0, r6
 8002d28:	47c0      	blx	r8
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	d0aa      	beq.n	8002c84 <_printf_i+0x12c>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	079b      	lsls	r3, r3, #30
 8002d32:	d413      	bmi.n	8002d5c <_printf_i+0x204>
 8002d34:	68e0      	ldr	r0, [r4, #12]
 8002d36:	9b03      	ldr	r3, [sp, #12]
 8002d38:	4298      	cmp	r0, r3
 8002d3a:	bfb8      	it	lt
 8002d3c:	4618      	movlt	r0, r3
 8002d3e:	e7a3      	b.n	8002c88 <_printf_i+0x130>
 8002d40:	2301      	movs	r3, #1
 8002d42:	464a      	mov	r2, r9
 8002d44:	4639      	mov	r1, r7
 8002d46:	4630      	mov	r0, r6
 8002d48:	47c0      	blx	r8
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d09a      	beq.n	8002c84 <_printf_i+0x12c>
 8002d4e:	3501      	adds	r5, #1
 8002d50:	68e3      	ldr	r3, [r4, #12]
 8002d52:	9a03      	ldr	r2, [sp, #12]
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	42ab      	cmp	r3, r5
 8002d58:	dcf2      	bgt.n	8002d40 <_printf_i+0x1e8>
 8002d5a:	e7eb      	b.n	8002d34 <_printf_i+0x1dc>
 8002d5c:	2500      	movs	r5, #0
 8002d5e:	f104 0919 	add.w	r9, r4, #25
 8002d62:	e7f5      	b.n	8002d50 <_printf_i+0x1f8>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ac      	bne.n	8002cc2 <_printf_i+0x16a>
 8002d68:	7803      	ldrb	r3, [r0, #0]
 8002d6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d72:	e76c      	b.n	8002c4e <_printf_i+0xf6>
 8002d74:	08002ee5 	.word	0x08002ee5
 8002d78:	08002ef6 	.word	0x08002ef6

08002d7c <_sbrk_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4c06      	ldr	r4, [pc, #24]	; (8002d98 <_sbrk_r+0x1c>)
 8002d80:	2300      	movs	r3, #0
 8002d82:	4605      	mov	r5, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	6023      	str	r3, [r4, #0]
 8002d88:	f7fe f950 	bl	800102c <_sbrk>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	d102      	bne.n	8002d96 <_sbrk_r+0x1a>
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	b103      	cbz	r3, 8002d96 <_sbrk_r+0x1a>
 8002d94:	602b      	str	r3, [r5, #0]
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	20000118 	.word	0x20000118

08002d9c <memcpy>:
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	1e43      	subs	r3, r0, #1
 8002da0:	440a      	add	r2, r1
 8002da2:	4291      	cmp	r1, r2
 8002da4:	d100      	bne.n	8002da8 <memcpy+0xc>
 8002da6:	bd10      	pop	{r4, pc}
 8002da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002db0:	e7f7      	b.n	8002da2 <memcpy+0x6>

08002db2 <memmove>:
 8002db2:	4288      	cmp	r0, r1
 8002db4:	b510      	push	{r4, lr}
 8002db6:	eb01 0302 	add.w	r3, r1, r2
 8002dba:	d807      	bhi.n	8002dcc <memmove+0x1a>
 8002dbc:	1e42      	subs	r2, r0, #1
 8002dbe:	4299      	cmp	r1, r3
 8002dc0:	d00a      	beq.n	8002dd8 <memmove+0x26>
 8002dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002dca:	e7f8      	b.n	8002dbe <memmove+0xc>
 8002dcc:	4283      	cmp	r3, r0
 8002dce:	d9f5      	bls.n	8002dbc <memmove+0xa>
 8002dd0:	1881      	adds	r1, r0, r2
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	42d3      	cmn	r3, r2
 8002dd6:	d100      	bne.n	8002dda <memmove+0x28>
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002de2:	e7f7      	b.n	8002dd4 <memmove+0x22>

08002de4 <__malloc_lock>:
 8002de4:	4770      	bx	lr

08002de6 <__malloc_unlock>:
 8002de6:	4770      	bx	lr

08002de8 <_realloc_r>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	4607      	mov	r7, r0
 8002dec:	4614      	mov	r4, r2
 8002dee:	460e      	mov	r6, r1
 8002df0:	b921      	cbnz	r1, 8002dfc <_realloc_r+0x14>
 8002df2:	4611      	mov	r1, r2
 8002df4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002df8:	f7ff bc8c 	b.w	8002714 <_malloc_r>
 8002dfc:	b922      	cbnz	r2, 8002e08 <_realloc_r+0x20>
 8002dfe:	f7ff fc3b 	bl	8002678 <_free_r>
 8002e02:	4625      	mov	r5, r4
 8002e04:	4628      	mov	r0, r5
 8002e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e08:	f000 f814 	bl	8002e34 <_malloc_usable_size_r>
 8002e0c:	42a0      	cmp	r0, r4
 8002e0e:	d20f      	bcs.n	8002e30 <_realloc_r+0x48>
 8002e10:	4621      	mov	r1, r4
 8002e12:	4638      	mov	r0, r7
 8002e14:	f7ff fc7e 	bl	8002714 <_malloc_r>
 8002e18:	4605      	mov	r5, r0
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d0f2      	beq.n	8002e04 <_realloc_r+0x1c>
 8002e1e:	4631      	mov	r1, r6
 8002e20:	4622      	mov	r2, r4
 8002e22:	f7ff ffbb 	bl	8002d9c <memcpy>
 8002e26:	4631      	mov	r1, r6
 8002e28:	4638      	mov	r0, r7
 8002e2a:	f7ff fc25 	bl	8002678 <_free_r>
 8002e2e:	e7e9      	b.n	8002e04 <_realloc_r+0x1c>
 8002e30:	4635      	mov	r5, r6
 8002e32:	e7e7      	b.n	8002e04 <_realloc_r+0x1c>

08002e34 <_malloc_usable_size_r>:
 8002e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e38:	1f18      	subs	r0, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bfbc      	itt	lt
 8002e3e:	580b      	ldrlt	r3, [r1, r0]
 8002e40:	18c0      	addlt	r0, r0, r3
 8002e42:	4770      	bx	lr

08002e44 <_init>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	bf00      	nop
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr

08002e50 <_fini>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr
